// Code generated by MockGen. DO NOT EDIT.
// Source: resource_bot_webhook.go

// Package mocks is a generated GoMock package.
package mocks

import (
	telegram_bot_api "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWebhookSetter is a mock of WebhookSetter interface
type MockWebhookSetter struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookSetterMockRecorder
}

// MockWebhookSetterMockRecorder is the mock recorder for MockWebhookSetter
type MockWebhookSetterMockRecorder struct {
	mock *MockWebhookSetter
}

// NewMockWebhookSetter creates a new mock instance
func NewMockWebhookSetter(ctrl *gomock.Controller) *MockWebhookSetter {
	mock := &MockWebhookSetter{ctrl: ctrl}
	mock.recorder = &MockWebhookSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebhookSetter) EXPECT() *MockWebhookSetterMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockWebhookSetter) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockWebhookSetterMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockWebhookSetter)(nil).ID))
}

// SetWebhook mocks base method
func (m *MockWebhookSetter) SetWebhook(config telegram_bot_api.WebhookConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebhook", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWebhook indicates an expected call of SetWebhook
func (mr *MockWebhookSetterMockRecorder) SetWebhook(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebhook", reflect.TypeOf((*MockWebhookSetter)(nil).SetWebhook), config)
}

// MockWebhookGetter is a mock of WebhookGetter interface
type MockWebhookGetter struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookGetterMockRecorder
}

// MockWebhookGetterMockRecorder is the mock recorder for MockWebhookGetter
type MockWebhookGetterMockRecorder struct {
	mock *MockWebhookGetter
}

// NewMockWebhookGetter creates a new mock instance
func NewMockWebhookGetter(ctrl *gomock.Controller) *MockWebhookGetter {
	mock := &MockWebhookGetter{ctrl: ctrl}
	mock.recorder = &MockWebhookGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebhookGetter) EXPECT() *MockWebhookGetterMockRecorder {
	return m.recorder
}

// GetWebhookInfo mocks base method
func (m *MockWebhookGetter) GetWebhookInfo() (telegram_bot_api.WebhookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookInfo")
	ret0, _ := ret[0].(telegram_bot_api.WebhookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookInfo indicates an expected call of GetWebhookInfo
func (mr *MockWebhookGetterMockRecorder) GetWebhookInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookInfo", reflect.TypeOf((*MockWebhookGetter)(nil).GetWebhookInfo))
}

// MockWebhookRemover is a mock of WebhookRemover interface
type MockWebhookRemover struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookRemoverMockRecorder
}

// MockWebhookRemoverMockRecorder is the mock recorder for MockWebhookRemover
type MockWebhookRemoverMockRecorder struct {
	mock *MockWebhookRemover
}

// NewMockWebhookRemover creates a new mock instance
func NewMockWebhookRemover(ctrl *gomock.Controller) *MockWebhookRemover {
	mock := &MockWebhookRemover{ctrl: ctrl}
	mock.recorder = &MockWebhookRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebhookRemover) EXPECT() *MockWebhookRemoverMockRecorder {
	return m.recorder
}

// RemoveWebhook mocks base method
func (m *MockWebhookRemover) RemoveWebhook() (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWebhook")
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWebhook indicates an expected call of RemoveWebhook
func (mr *MockWebhookRemoverMockRecorder) RemoveWebhook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWebhook", reflect.TypeOf((*MockWebhookRemover)(nil).RemoveWebhook))
}
