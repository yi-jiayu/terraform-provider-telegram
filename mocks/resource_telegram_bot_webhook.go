// Code generated by MockGen. DO NOT EDIT.
// Source: resource_telegram_bot_webhook.go

// Package mocks is a generated GoMock package.
package mocks

import (
	telegram_bot_api "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockwebhookSetter is a mock of webhookSetter interface
type MockwebhookSetter struct {
	ctrl     *gomock.Controller
	recorder *MockwebhookSetterMockRecorder
}

// MockwebhookSetterMockRecorder is the mock recorder for MockwebhookSetter
type MockwebhookSetterMockRecorder struct {
	mock *MockwebhookSetter
}

// NewMockwebhookSetter creates a new mock instance
func NewMockwebhookSetter(ctrl *gomock.Controller) *MockwebhookSetter {
	mock := &MockwebhookSetter{ctrl: ctrl}
	mock.recorder = &MockwebhookSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwebhookSetter) EXPECT() *MockwebhookSetterMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockwebhookSetter) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockwebhookSetterMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockwebhookSetter)(nil).ID))
}

// SetWebhook mocks base method
func (m *MockwebhookSetter) SetWebhook(config telegram_bot_api.WebhookConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebhook", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWebhook indicates an expected call of SetWebhook
func (mr *MockwebhookSetterMockRecorder) SetWebhook(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebhook", reflect.TypeOf((*MockwebhookSetter)(nil).SetWebhook), config)
}

// MockwebhookGetter is a mock of webhookGetter interface
type MockwebhookGetter struct {
	ctrl     *gomock.Controller
	recorder *MockwebhookGetterMockRecorder
}

// MockwebhookGetterMockRecorder is the mock recorder for MockwebhookGetter
type MockwebhookGetterMockRecorder struct {
	mock *MockwebhookGetter
}

// NewMockwebhookGetter creates a new mock instance
func NewMockwebhookGetter(ctrl *gomock.Controller) *MockwebhookGetter {
	mock := &MockwebhookGetter{ctrl: ctrl}
	mock.recorder = &MockwebhookGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwebhookGetter) EXPECT() *MockwebhookGetterMockRecorder {
	return m.recorder
}

// GetWebhookInfo mocks base method
func (m *MockwebhookGetter) GetWebhookInfo() (telegram_bot_api.WebhookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookInfo")
	ret0, _ := ret[0].(telegram_bot_api.WebhookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookInfo indicates an expected call of GetWebhookInfo
func (mr *MockwebhookGetterMockRecorder) GetWebhookInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookInfo", reflect.TypeOf((*MockwebhookGetter)(nil).GetWebhookInfo))
}

// MockwebhookRemover is a mock of webhookRemover interface
type MockwebhookRemover struct {
	ctrl     *gomock.Controller
	recorder *MockwebhookRemoverMockRecorder
}

// MockwebhookRemoverMockRecorder is the mock recorder for MockwebhookRemover
type MockwebhookRemoverMockRecorder struct {
	mock *MockwebhookRemover
}

// NewMockwebhookRemover creates a new mock instance
func NewMockwebhookRemover(ctrl *gomock.Controller) *MockwebhookRemover {
	mock := &MockwebhookRemover{ctrl: ctrl}
	mock.recorder = &MockwebhookRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwebhookRemover) EXPECT() *MockwebhookRemoverMockRecorder {
	return m.recorder
}

// RemoveWebhook mocks base method
func (m *MockwebhookRemover) RemoveWebhook() (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWebhook")
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWebhook indicates an expected call of RemoveWebhook
func (mr *MockwebhookRemoverMockRecorder) RemoveWebhook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWebhook", reflect.TypeOf((*MockwebhookRemover)(nil).RemoveWebhook))
}
